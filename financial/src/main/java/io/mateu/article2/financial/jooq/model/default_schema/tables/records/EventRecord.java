/*
 * This file is generated by jOOQ.
 */
package io.mateu.article2.financial.jooq.model.default_schema.tables.records;


import io.mateu.article2.financial.jooq.model.default_schema.tables.Event;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EventRecord extends UpdatableRecordImpl<EventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>EVENT.ID</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>EVENT.ID</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>EVENT.SOURCE</code>.
     */
    public void setSource(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>EVENT.SOURCE</code>.
     */
    public String getSource() {
        return (String) get(1);
    }

    /**
     * Setter for <code>EVENT._WHEN</code>.
     */
    public void set_When(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>EVENT._WHEN</code>.
     */
    public LocalDateTime get_When() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>EVENT.PAYLOAD</code>.
     */
    public void setPayload(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>EVENT.PAYLOAD</code>.
     */
    public String getPayload() {
        return (String) get(3);
    }

    /**
     * Setter for <code>EVENT.STATUS</code>.
     */
    public void setStatus(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>EVENT.STATUS</code>.
     */
    public String getStatus() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EventRecord
     */
    public EventRecord() {
        super(Event.EVENT);
    }

    /**
     * Create a detached, initialised EventRecord
     */
    public EventRecord(String id, String source, LocalDateTime _When, String payload, String status) {
        super(Event.EVENT);

        setId(id);
        setSource(source);
        set_When(_When);
        setPayload(payload);
        setStatus(status);
        resetChangedOnNotNull();
    }
}
