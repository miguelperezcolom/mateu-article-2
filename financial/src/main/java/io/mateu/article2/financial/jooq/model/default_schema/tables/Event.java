/*
 * This file is generated by jOOQ.
 */
package io.mateu.article2.financial.jooq.model.default_schema.tables;


import io.mateu.article2.financial.jooq.model.default_schema.DefaultSchema;
import io.mateu.article2.financial.jooq.model.default_schema.Keys;
import io.mateu.article2.financial.jooq.model.default_schema.tables.records.EventRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Event extends TableImpl<EventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>EVENT</code>
     */
    public static final Event EVENT = new Event();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventRecord> getRecordType() {
        return EventRecord.class;
    }

    /**
     * The column <code>EVENT.ID</code>.
     */
    public final TableField<EventRecord, String> ID = createField(DSL.name("ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>EVENT.SOURCE</code>.
     */
    public final TableField<EventRecord, String> SOURCE = createField(DSL.name("SOURCE"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>EVENT._WHEN</code>.
     */
    public final TableField<EventRecord, LocalDateTime> _WHEN = createField(DSL.name("_WHEN"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>EVENT.PAYLOAD</code>.
     */
    public final TableField<EventRecord, String> PAYLOAD = createField(DSL.name("PAYLOAD"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>EVENT.STATUS</code>.
     */
    public final TableField<EventRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(64), this, "");

    private Event(Name alias, Table<EventRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Event(Name alias, Table<EventRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>EVENT</code> table reference
     */
    public Event(String alias) {
        this(DSL.name(alias), EVENT);
    }

    /**
     * Create an aliased <code>EVENT</code> table reference
     */
    public Event(Name alias) {
        this(alias, EVENT);
    }

    /**
     * Create a <code>EVENT</code> table reference
     */
    public Event() {
        this(DSL.name("EVENT"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<EventRecord> getPrimaryKey() {
        return Keys.PK_EVENT;
    }

    @Override
    public Event as(String alias) {
        return new Event(DSL.name(alias), this);
    }

    @Override
    public Event as(Name alias) {
        return new Event(alias, this);
    }

    @Override
    public Event as(Table<?> alias) {
        return new Event(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(String name) {
        return new Event(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(Name name) {
        return new Event(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(Table<?> name) {
        return new Event(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event where(Condition condition) {
        return new Event(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Event where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Event where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Event where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Event where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
