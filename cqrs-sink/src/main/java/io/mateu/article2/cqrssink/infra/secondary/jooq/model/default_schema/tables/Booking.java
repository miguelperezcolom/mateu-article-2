/*
 * This file is generated by jOOQ.
 */
package io.mateu.article2.cqrssink.infra.secondary.jooq.model.default_schema.tables;


import io.mateu.article2.cqrssink.infra.secondary.jooq.model.default_schema.DefaultSchema;
import io.mateu.article2.cqrssink.infra.secondary.jooq.model.default_schema.Keys;
import io.mateu.article2.cqrssink.infra.secondary.jooq.model.default_schema.tables.records.BookingRecord;

import java.math.BigDecimal;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Booking extends TableImpl<BookingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>BOOKING</code>
     */
    public static final Booking BOOKING = new Booking();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookingRecord> getRecordType() {
        return BookingRecord.class;
    }

    /**
     * The column <code>BOOKING.ID</code>.
     */
    public final TableField<BookingRecord, String> ID = createField(DSL.name("ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>BOOKING.CUSTOMER</code>.
     */
    public final TableField<BookingRecord, String> CUSTOMER = createField(DSL.name("CUSTOMER"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>BOOKING.SERVICE</code>.
     */
    public final TableField<BookingRecord, String> SERVICE = createField(DSL.name("SERVICE"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>BOOKING.START_DATE</code>.
     */
    public final TableField<BookingRecord, String> START_DATE = createField(DSL.name("START_DATE"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>BOOKING.END_DATE</code>.
     */
    public final TableField<BookingRecord, String> END_DATE = createField(DSL.name("END_DATE"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>BOOKING.VALUE</code>.
     */
    public final TableField<BookingRecord, BigDecimal> VALUE = createField(DSL.name("VALUE"), SQLDataType.DECIMAL(12, 3), this, "");

    /**
     * The column <code>BOOKING.STATUS</code>.
     */
    public final TableField<BookingRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>BOOKING.INVOICED</code>.
     */
    public final TableField<BookingRecord, BigDecimal> INVOICED = createField(DSL.name("INVOICED"), SQLDataType.DECIMAL(12, 3), this, "");

    /**
     * The column <code>BOOKING.PAID</code>.
     */
    public final TableField<BookingRecord, BigDecimal> PAID = createField(DSL.name("PAID"), SQLDataType.DECIMAL(12, 3), this, "");

    /**
     * The column <code>BOOKING.SEARCHABLE_TEXT</code>.
     */
    public final TableField<BookingRecord, String> SEARCHABLE_TEXT = createField(DSL.name("SEARCHABLE_TEXT"), SQLDataType.CLOB, this, "");

    private Booking(Name alias, Table<BookingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Booking(Name alias, Table<BookingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>BOOKING</code> table reference
     */
    public Booking(String alias) {
        this(DSL.name(alias), BOOKING);
    }

    /**
     * Create an aliased <code>BOOKING</code> table reference
     */
    public Booking(Name alias) {
        this(alias, BOOKING);
    }

    /**
     * Create a <code>BOOKING</code> table reference
     */
    public Booking() {
        this(DSL.name("BOOKING"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BookingRecord> getPrimaryKey() {
        return Keys.PK_BOOKING;
    }

    @Override
    public Booking as(String alias) {
        return new Booking(DSL.name(alias), this);
    }

    @Override
    public Booking as(Name alias) {
        return new Booking(alias, this);
    }

    @Override
    public Booking as(Table<?> alias) {
        return new Booking(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Booking rename(String name) {
        return new Booking(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Booking rename(Name name) {
        return new Booking(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Booking rename(Table<?> name) {
        return new Booking(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Booking where(Condition condition) {
        return new Booking(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Booking where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Booking where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Booking where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Booking where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Booking where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Booking where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Booking where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Booking whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Booking whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
